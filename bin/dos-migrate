#!/usr/bin/env node

var program = require('commander');
var jsdom = require('jsdom').jsdom;
var mongoose = require('mongoose');
var path = require('path');
var resolve = path.resolve;
var fs = require('fs');
var dir = fs.readdirSync;
var read = fs.readFileSync;
var exists = fs.existsSync;

// Little hack to include `NODE_PATH=.`
require('node-path')(module, [resolve('.')]);

program
  .option('-u, --user <name>', "MongoDB username.")
  .option('-p, --password <password>', "MongoDB password.")
  .option('-h, --host <name>', "MongoDB host. [localhost]", String, "localhost")
  .option('-p, --port <port>', "MongoDB port. [27017]", Number, 27017)
  .option('-d, --database <name>', "MongoDB database name.", String, "DemocracyOS-dev")
  .option('-U, --url <url>', "MongoDB URL. (mongodb://user:pass@localhost:27017/DemocracyOS)")
  .option('--noaction', 'Don\'t perform any action')

program
  .command('test')
  .action(function() {
    console.log('test');
//    var document = jsdom('<div class="hola">A</div><div>B</div>').documentElement;
    console.dir(document.getElementsByClassName('hola')[0].innerHTML)
    process.exit(0)
  })

program.parse(process.argv);

connect(function () {
  function get(topicId, cb) {
    api.topic.get(topicId, function (err, topic) {
      if (topic.clauses[0] && topic.clauses[0]._doc && topic.clauses[0]._doc.clauseName) {
        return cb(topic, 'old');
      } else if (topic._doc.summary) {
        return cb(topic, 'new')
      } else {
        cb(topic, 'UNKNOWN');
      }
    });
  }

  models();
  var api = require('lib/db-api');
  api.topic.all(function(err, topics) {
    topics.forEach(function (topic) {
      get(topic.id, function (topic, kind) {
        console.log(topic.id + ' is ' + kind)
        if ('old' === kind) {
          if (program.noaction) {
            return;
          }
          var data = {};
          data.clauses = topic.clauses.map(function (clause) {
            console.log(clause._id)
            return {
              id: clause._id,
              markup: '<div>' + clause._doc.text + '</div>',
              position: clause._doc.order,
              empty: false
            };
          });

          data.clauses.push({
            markup: '<div>' + topic._doc.summary + '</div>',
            position: -1,
            empty: false
          });

          topic.set(data);
          topic.save(function () {
            console.log('saved');
          });

        } else if ('new' === kind) {
          var html = topic._doc.summary;
          var document = getDOM(html);
          write('topic.summary: ' + html)
          var divs = document.getElementsByTagName('div');
          for (i in divs) {
            if (divs.hasOwnProperty(i)) {
              var div = divs[i];
              var markup = div.outerHTML;
              write('topic.clauses[' + i + ']: ' + markup);
              var doc = {
                markup: markup,
                position: i,
                empty: false
              };
              topic.clauses.push(doc);
              // The newly created clause ID
              var clauseId = topic.clauses[topic.clauses.length - 1]._id;
              write('topic.clauses[' + i + '].id: ' + clauseId);

              // Now update its side-comments
              var context = 'summary';//(i === 0) ? 'summary' : 'content';
              var reference = topic._id + '-' + (+i + 1);
              write('Getting comments for ' + context + ' referenced to ' + reference);
              api.comment.get({
                  context: context,
                  reference: reference
                },
                {
                  page: 0,
                  limit: 0,
                  exclude_user: null
                },
                function(err, comments) {
                  write('comments.length: ' + comments.length);
                  comments.forEach(function(comment) {
                    comment.reference = clauseId;
                    comment.context = 'paragraph';
                    write('comment.reference: ' + clauseId);
                    if (!program.noaction) {
                      comment.save(function (err) {
                        if (err) write('Error saving comment: ' + err.toString());
                        write('comment.save() => OK!');
                      })
                    }
                  });

                }
              );
            }
          }

          if (program.noaction) {
            exit();
          }
          write('Saving...')
          topic.save(function (err) {
            if (err) write('Error saving topic: ' + err.toString());
            write('Topic saved!')
          });

        }
      })
    })
  });
});

function getDOM (str) {
  var dom = jsdom(str);
  return dom.documentElement;
}

/**
 * Write `msg` to stdout
 *
 * @param {String} msg
 * @requires process
 * @api private
 */

function write (msg) {
  process.stdout.write(msg);
  process.stdout.write('\n');
}

/**
 * Write err `msg` to console
 *
 * @param {String} msg
 * @requires process
 * @api private
 */

function error () {
  console.log.apply(console, arguments);
  process.exit(1);
}

/**
 * Exit from process
 *
 * @requires process
 * @api private
 */

function exit () {
  process.exit(0);
}

/**
 * Connects to mongoDB
 *
 * @param {Function} fn
 * @requires program
 * @requires mongoose
 * @api private
 */

function connect (fn) {
  write("Connecting to " + mongoURL());
  fn = fn || function() {};
  mongoose.connect(mongoURL(), fn);
}

/**
 * Registers all available models
 *
 * @param {Function} fn
 * @requires path.
 */

function models(fn) {
  write("Register mongoose models.");
  var except = ['index.js'];
  var files = dir(resolve('./lib/models/'));
  files && files.forEach(function(f) {
    if (~except.indexOf(f)) return;
    require(resolve('./lib/models/' + f ))(mongoose);
  });
  fn && fn();
}

/**
 * Disconnects from mongoDB
 *
 * @param {Function} fn
 * @requires program
 * @requires mongoose
 * @api private
 */

function disconnect (fn) {
  write("Disconnecting from " + mongoURL());
  if (!mongoose.connections.length) return console.log("Not connected to DB!");
  fn = fn || function() {};
  mongoose.disconnect(fn);
}

/**
 * Make mongodb url from program
 *
 * @requires program from upper scope
 * @api private
 */

function mongoURL () {
  return program.url || "mongodb://"
    + (program.user ? program.user + ":" + program.password + "@" : "")
    + program.host
    + ":"
    + program.port
    + "/"
    + program.database;
}